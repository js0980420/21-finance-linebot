import{_ as V,$,c as q,o as A,a as F,ai as H,ak as R,s as x,al as D,am as w,r as B,aA as E,i as h,y as G,b as J,an as f,ap as P,ao as U,aB as K,p as L}from"#entry";import{u as Q,t as W}from"./mD2okE1y.js";import{u as X}from"./Xhxc7jYu.js";const u=D(f.ui.strategy,f.ui.textarea,W),Y=$({inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},id:{type:String,default:null},name:{type:String,default:null},placeholder:{type:String,default:null},required:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},rows:{type:Number,default:3},maxrows:{type:Number,default:0},autoresize:{type:Boolean,default:!1},autofocus:{type:Boolean,default:!1},autofocusDelay:{type:Number,default:100},resize:{type:Boolean,default:!1},padded:{type:Boolean,default:!0},size:{type:String,default:null,validator(e){return Object.keys(u.size).includes(e)}},color:{type:String,default:()=>u.default.color,validator(e){return[...f.ui.colors,...Object.keys(u.color)].includes(e)}},variant:{type:String,default:()=>u.default.variant,validator(e){return[...Object.keys(u.variant),...Object.values(u.color).flatMap(t=>Object.keys(t))].includes(e)}},textareaClass:{type:String,default:null},class:{type:[String,Object,Array],default:()=>""},ui:{type:Object,default:()=>({})},modelModifiers:{type:Object,default:()=>({})}},emits:["update:modelValue","blur","change"],setup(e,{emit:t}){const{ui:l,attrs:m}=Q("textarea",w(e,"ui"),u,w(e,"class")),{emitFormBlur:c,emitFormInput:p,inputId:r,color:v,size:y,name:z}=X(e,u),s=B(E({},e.modelModifiers,{trim:!1,lazy:!1,number:!1,nullify:!1})),o=B(null),g=()=>{e.autofocus&&o.value?.focus()},i=()=>{if(e.autoresize){if(!o.value)return;o.value.rows=e.rows;const a=o.value.style.overflow;o.value.style.overflow="hidden";const n=window.getComputedStyle(o.value),j=Number.parseInt(n.paddingTop),k=Number.parseInt(n.paddingBottom),O=j+k,M=Number.parseInt(n.lineHeight),{scrollHeight:T}=o.value,d=(T-O)/M;d>e.rows&&(o.value.rows=e.maxrows?Math.min(d,e.maxrows):d),o.value.style.overflow=a}},b=a=>{s.value.trim&&(a=a.trim()),s.value.number&&(a=K(a)),s.value.nullify&&(a||=null),t("update:modelValue",a),p()},C=a=>{i(),s.value.lazy||b(a.target.value)},I=a=>{const n=a.target.value;t("change",n),s.value.lazy&&b(n),s.value.trim&&(a.target.value=n.trim())},S=a=>{t("blur",a),c()};h(()=>{setTimeout(()=>{g()},e.autofocusDelay)}),G(()=>e.modelValue,()=>{L(i)}),h(()=>{setTimeout(()=>{g(),i()},100)});const N=J(()=>{const a=l.value.color?.[v.value]?.[e.variant]||l.value.variant[e.variant];return P(U(l.value.base,l.value.form,l.value.rounded,l.value.placeholder,l.value.size[y.value],e.padded?l.value.padding[y.value]:"p-0",a?.replaceAll("{color}",v.value),!e.resize&&"resize-none"),e.textareaClass)});return{ui:l,attrs:m,name:z,inputId:r,textarea:o,textareaClass:N,onInput:C,onChange:I,onBlur:S}}}),Z=["id","value","name","rows","required","disabled","placeholder"];function _(e,t,l,m,c,p){return A(),q("div",{class:x(e.ui.wrapper)},[F("textarea",R({id:e.inputId,ref:"textarea",value:e.modelValue,name:e.name,rows:e.rows,required:e.required,disabled:e.disabled,placeholder:e.placeholder,class:e.textareaClass},e.attrs,{onInput:t[0]||(t[0]=(...r)=>e.onInput&&e.onInput(...r)),onBlur:t[1]||(t[1]=(...r)=>e.onBlur&&e.onBlur(...r)),onChange:t[2]||(t[2]=(...r)=>e.onChange&&e.onChange(...r))}),null,16,Z),H(e.$slots,"default")],2)}const le=V(Y,[["render",_]]);export{le as default};
