# 融資貸款CRM系統 - 編碼規則

## 🌐 語言要求
- 所有註解、說明文檔、API回應訊息必須使用繁體中文
- 變數名稱和函數名稱使用英文，但註解說明必須是繁體中文
- 資料庫遷移檔案的順序必須維持不變，不能打亂

## 🏗️ 架構規範
- 後端：Laravel 10 + PHP 8.2
- 前端：Nuxt.js 3 + Vue 3 + TypeScript
- 資料庫：MySQL 8.0
- 快取：Redis
- 容器化：Docker + Docker Compose

## 📝 編碼風格
### PHP/Laravel
- 使用 PSR-12 編碼標準
- 類別名稱使用 PascalCase
- 方法名稱使用 camelCase
- 常數使用 UPPER_SNAKE_CASE
- 所有方法必須有完整的 PHPDoc 註解（繁體中文）

### JavaScript/TypeScript
- 使用 ESLint + Prettier
- 變數和函數使用 camelCase
- 常數使用 UPPER_SNAKE_CASE
- 介面和型別使用 PascalCase
- 組件檔案使用 PascalCase

### Vue/Nuxt
- 組件名稱使用 PascalCase
- Props 使用 camelCase
- 事件名稱使用 kebab-case
- 所有組件必須有完整的註解說明

## 🗄️ 資料庫規範
- 資料表名稱使用複數形式的 snake_case
- 欄位名稱使用 snake_case
- 主鍵統一使用 `id`
- 時間戳欄位：`created_at`, `updated_at`
- 軟刪除欄位：`deleted_at`
- 外鍵命名格式：`{table_name}_id`

## 🚀 部署資訊
### 開發環境端口
- 前端：http://localhost:9122
- 後端API：http://localhost:9222
- 資料庫：localhost:9322
- Redis：localhost:9422
- phpMyAdmin：http://localhost:9522

### 登入憑證
- 管理員：admin@finance-crm.com / admin123
- 主管：executive@finance-crm.com / password123
- 經理：manager@finance-crm.com / password123
- 員工：staff@finance-crm.com / password123

## 📦 Docker 指令
```bash
# 啟動所有服務
docker compose up -d

# 重建並啟動
docker compose up --build -d

# 強制重建
docker compose up --build --force-recreate -d

# 查看後端日誌
docker logs finance0810-develop-backend-1

# 進入後端容器
docker exec -it finance0810-develop-backend-1 /bin/sh
```

## 🔒 安全規範
- 絕不在程式碼中硬編碼敏感資訊
- 使用環境變數管理配置
- API 必須有適當的驗證和授權
- 輸入資料必須進行驗證和清理
- 使用 HTTPS（生產環境）

## 📋 API 設計規範
- 使用 RESTful API 設計原則
- HTTP 狀態碼使用要正確
- 錯誤訊息必須是繁體中文且明確
- 回應格式統一使用 JSON
- API 文檔必須保持更新

## 🧪 測試要求
- 重要功能必須有單元測試
- API 端點必須有整合測試
- 前端組件必須有組件測試
- 測試描述和註解使用繁體中文

## 📚 文檔要求
- 所有新功能必須更新 README
- API 變更必須更新 API 文檔
- 重要決策記錄在 ADR (Architecture Decision Records)
- 所有文檔使用繁體中文撰寫

## 🔄 版本控制
- 千萬不能gith push到develop分支:https://github.com/13g7895123/finance0810/tree/develop，這是夥伴的生產環境
修改都push到js098分支，test分支已經複製好develop分支，在test分支測試merge分支js098的效果，所以會用test來做CI/CD，部屬到另一個生產環境
- 使用語義化版本 (Semantic Versioning)
- Commit 訊息使用繁體中文
- 重要變更必須建立 Pull Request
- 程式碼審查是必要的

🎯 安全工作流程確認

  分支架構

  1. js098 分支 ✅ - 您的本地開發分支（當前所在）
    - 包含您的所有本地修改和新功能
    - 安全推送目標: git push origin js098
  2. test 分支 ✅ - 測試整合分支
    - 已成功複製 partner/develop 的內容
    - 用於測試 js098 分支的合併效果
    - 將用於 CI/CD 部署到您的生產環境
  3. partner/develop 分支 ⚠️ 絕對禁止推送
    - 夥伴的生產環境：https://github.com/13g7895123/finance0810/tree/develop
    - 只能讀取，絕不能修改

  安全操作指南

  ✅ 允許的操作:
  - git push origin js098 - 推送您的修改到 js098 分支
  - git checkout test 然後 git merge js098 - 在 test 分支測試合併
  - 在 test 分支進行 CI/CD 部署

  ❌ 絕對禁止的操作:
  - git push partner develop
  - git push origin develop（如果存在的話）
  - 任何直接修改 partner/develop 的操作

## ⚡ 效能要求
- 資料庫查詢必須最佳化
- 前端打包檔案大小要控制
- 圖片必須進行壓縮和最佳化
- 使用適當的快取策略


